/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A top-level EIP component
 */
export type EipComponent = EipElement & {
  role: EipRole;
  connectionType: ConnectionType;
};
/**
 * The attribute's value type (attribute keys are always strings)
 */
export type AttributeType = string | number | boolean;
/**
 * A child EIP element. Each child element is a descendant of a top-level EipComponent and can recursively contain more child elements
 */
export type EipChildElement = EipElement & {
  occurrence?: Occurrence;
};
/**
 * Describes the expected general behavior of an EIP component
 */
export type EipRole = "channel" | "endpoint" | "router" | "transformer";
/**
 * Defines a connection pattern for an EIP component
 */
export type ConnectionType =
  | "content_based_router"
  | "inbound_request_reply"
  | "passthru"
  | "request_reply"
  | "sink"
  | "source"
  | "tee";

/**
 * Defines the collection of EIP components available for use
 */
export interface EipComponentDefinition {
  [k: string]: EipComponent[];
}
/**
 * The base schema for all EIP Elements (e.g. EipComponent, EipChildElement)
 */
export interface EipElement {
  name: string;
  description?: string;
  attributes?: Attribute[];
  childGroup?: EipChildGroup;
}
/**
 * Defines an EIP attribute
 */
export interface Attribute {
  name: string;
  type: "string" | "boolean" | "number";
  description?: string;
  default?: AttributeType;
  required?: boolean;
  restriction?: Restriction;
}
/**
 * Configures a constraint on the possible values of an attribute. Currently, only string enum constraints are supported.
 */
export interface Restriction {
  type: "enum";
  values?: string[];
}
/**
 * A container for child elements used to indicate their order or mutual exclusivity
 */
export interface EipChildGroup {
  /**
   * The type of child grouping. When combined with each child element's 'Occurrence', constrains the child's order and cardinality
   */
  indicator: "all" | "choice" | "sequence";
  children: EipChildElement[];
  occurrence?: Occurrence;
}
/**
 * Determines the cardinality of each element in a group
 */
export interface Occurrence {
  /**
   * The minimum number of instances of this element in the group
   */
  min?: number;
  /**
   * The maximum number of instances of this element in the group. Setting this to a value of '-1' enables adding an unbounded number of elements
   */
  max?: number;
}
